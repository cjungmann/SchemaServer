@node Setup
@chapter Setup

This chapter provides instructions for two setup scenarios, for the
server environment itself, and for a new site.

@menu
* Download and Install::
* Create a New Site::
@end menu

@node Download and Install
@section Download and Install

This section is included for completeness, but is likely to have already
been successful if these info pages are available.

@subheading Steps for Installation

This server program is written to be hosted on a Linux server, under
Apache.  As a FastCGI component, it is likely to work in other
environments, but there is no list of compatible environments.

@table @strong
@item Select a Host Directory
Change the working directory to an appropriate hosting directory.  I
recommend using @file{/usr/local/bin}, and the following steps will
assume this is the chosen directory.
@item Clone the Project
@example
/usr/local/bin$ sudo git clone https://github.com/cjungmann/SchemaServer.git
/usr/local/bin$ cd SchemaServer/src
/usr/local/bin$ sudo ./configure
/usr/local/bin$ sudo make
/usr/local/bin$ sudo make install
@end example


@end table





@node Create a New Site
@section Create a New Site

The instructions in the section describe installing a new site
under the default Apache site directory, @code{/var/www}.  Actions
under this directory will likely require root access, so each
command will start with @command{sudo}.

On my development workstation, I put new sites in @code{~/www}
directory, which is more convenient because I have full rights to
the directory and I don't have to remember which commands need to
be run as root.  I develop the site under my home directory, then
copy it to a production directory when I'm ready to make the site
public.

Adjust the commands according to the specific target environment.

@table @strong
@item Create Site Directories
Create the directory in which the site will run.  Since SchemaServer
works with MySQL tables and procedures, it may be helpful to create
separate subdirectories for the MySQL scripts and the web site.
This example illustrates this approach:
@example
~/$ cd /var/www
/var/www$ sudo mkdir MyWebApp
/var/www$ cd MyWebApp
/var/www/MyWebApp$ sudo mkdir setup site
@end example

/var/www/
   /var/www/MyWebApp
      var/www/MyWebApp/setup
      var/www/MyWebApp/site

@item Create a New Database
Although we remain in the new directory, the working directory
is not important when creating a new database:
@example
/var/www/MyWebApps$ mysql -e CREATE\ DATABASE\ MyWebApp
@end example

@item Load the System Procedures
@example
/var/www/MyWebApps$ cd /usr/local/lib/SchemaServer/install
/usr/local/lib/SchemaServer/install$ mysql MyWebApp < sys_procs.sql
@end example

@item Create MySQL Scripts
Assuming the recommendd directory structure, go to the @code{setup}
directory to create the SQL scripts from which the site will be
constructed.
@example
/usr/local/lib/SchemaServer/install$ cd /var/www/MyWebApp/site
/var/www/MyWebApp/site$ sudo emacs tables.sql
@end example

@end table


