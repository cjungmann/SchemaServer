@node Setup
@chapter Setup

This chapter provides instructions for two setup scenarios, for the
server environment itself, and for a new site.

@menu
* Download and Install::      Get the server files from GitHub
* Configure MySQL::           Global settings and MySQL user account
* Create a New Site::         Directories and files, with MySQL setup
* Apache Configuration::      Contents and destination for configuration file
* Make Site Available::       Make entry in hosts file or DNS account
@end menu

@node Download and Install
@section Download and Install

This section is included for completeness, but is likely to have already
been successful if these info pages are available.

@subheading Steps for Installation

This server program is written to be hosted on a Linux server, under
Apache.  As a FastCGI component, it is likely to work in other
environments, but there is no list of compatible environments.

@table @strong
@item Select a Host Directory
Change the working directory to an appropriate hosting directory.  I
recommend using @file{/usr/local/bin}, and the following steps will
assume this is the chosen directory.
@item Clone the Project
@example
/usr/local/bin$ sudo git clone https://github.com/cjungmann/SchemaServer.git
/usr/local/bin$ cd SchemaServer/src
/usr/local/bin$ sudo ./configure
/usr/local/bin$ sudo make
/usr/local/bin$ sudo make install
@end example


@end table


@node Configure MySQL
@section Configure MySQL

@menu
* MySQL Global Configuration::
* Create MySQL User Account::
* Set Default MySQL User::
* Developer MySQL User::
@end menu

@node MySQL Global Configuration
@subsection MySQL Global Configuration

The Schema Framework, in which SchemaServer resides, needs to occasionally
manage expired sessions, and may well need to do other scheduled tasks.
For MySQL to run scheduled tasks, the @emph{event_scheduler} must be
enabled.

Add the following text to the global MySQL configuration file, @file{/etc/mysql/my.cnf}:

@example
[mysqld]
event_scheduler=ON
@end example

@node Create MySQL User Account
@subsection Create MySQL User Account

Part of the Schema Server security provisions is to restrict interaction
with MySQL to running stored procedures, with one exception discussed below.
Knowing that an ad hoc query will never be run, the MySQL user can safely
disable that privilege.

The recommendation is to create a limited-privilege user named @emph{webuser}
to be used by @code{schema.fcgi}.  Several script generators make that
assumption, so care must be taken if an alternate MySQL account is to be used.

Create the @emph{webuser} account with the following commands:

@example
mysql> CREATE USER 'webuser'@@'localhost' IDENTIFIED BY 'webuser';
mysql> GRANT EXECUTE ON *.* to 'webuser'@@'localhost';
mysql> GRANT FILE ON *.* to 'webuser'@@'localhost';
mysql> FLUSH PRIVILEGES;
@end example

Notes on the example

@table @strong
@item IDENTIFIED BY 'webuser'
The password is simple and guessable.  Security should be ensured by
setting extremely limited privileges of the user.
@item GRANT EXECUTE ON
The only privilege is to execute, that is, CALLing stored procedures.
The procedures can be further secured by using session variables and
having the procedures check their status before running any queries.
@item GRANT FILE ON
Allows importing data.  Omit this line if importing will not be offered
because there are some security issues with this privilege.  See
@xref{Import Security} for a discussion about how the system is secured
despite the aforementioned vulnerability.
@item FLUSH PRIVILEGES
Activates the new privileges.
@end table

Confirm the @emph{webuser} privileges with the following command
entered in the OS shell, looking for all but @emph{Execute_priv}
and @emph{File_priv} lines set to N:

@example
mysql -R -e "SELECT * FROM mysql.user WHERE user='webuser'"
@end example

@node Set Default MySQL User
@subsection Set Default MySQL User

Prepare the server to use 'webuser' by setting a [client] entry
in the global MySQL configuration file.

Add the following lines to @file{/etc/mysql/my.cnf}:

@example
[client]
host = localhost
user = webuser
password = webuser
@end example

This client entry will be the default MySQL user that will automatically
be used in the absence of other credentials.

@node Developer MySQL User
@subsection Developer MySQL User

Although the default user should be setup as a limited @emph{webuser}
account, preparing any SchemaFramework site will require extensive
privileges.  Make sure such a user is available

This developer creates a client entry in @file{~/.my.cnf} for more
privileged access during development, especially when loading the
stored procedures.

@example
[client]
host = localhost
user = root
password = rootpassword
@end example

Of course, @emph{root} may also be a bad account choice for development,
and the @emph{rootpassword} is a placeholder for the real password
that should replace the password entry.


@node Create a New Site
@section Create a New Site

The instructions in the section describe installing a new site
under the default Apache site directory, @code{/var/www}.  Actions
under this directory will likely require root access, so each
command will start with @command{sudo}.

On my development workstation, I put new sites in @code{~/www}
directory, which is more convenient because I have full rights to
the directory and I don't have to remember which commands need to
be run as root.  I develop the site under my home directory, then
copy it to a production directory when I'm ready to make the site
public.

Adjust the commands according to the specific target environment.

@table @strong
@item Create Site Directories
Create the directory in which the site will run.  Since SchemaServer
works with MySQL tables and procedures, it may be helpful to create
separate subdirectories for the MySQL scripts and the web site.
This example illustrates this approach:

@example
~/$ cd /var/www
/var/www$ sudo mkdir MyWebApp
/var/www$ cd MyWebApp
/var/www/MyWebApp$ sudo mkdir setup site
@end example

@item Install Framework
Continuing from the previous step, enter the @code{site}
directory to install a framework.  It is recommended that the
default SchemaFramework be used.
@inforef{Installation, Install default Schema Framework, schemafw}


@item Create a New Database
Although we remain in the new directory, the working directory
is not important when creating a new database:
@example
$ cd /var/www/MyWebApp
$ mysql -e CREATE\ DATABASE\ MyWebApp
@end example

@item Load the System Procedures
@example
$ cd /usr/local/lib/SchemaServer/install
$ mysql MyWebApp < sys_procs.sql
@end example

@item Create MySQL Scripts
Assuming the recommended directory structure, go to the @code{setup}
directory to create the SQL scripts from which the site will be
constructed.
@example
$ cd /var/www/MyWebApp/site
$ sudo emacs tables.sql
@end example

@end table


@node Apache Configuration
@section Apache Configuration

The next step to creating a SchemaServer is to create and
enable an Apache configuration file.

The following example continues with the assumptions of the
previous page, where the database and the host directory is
named @emph{MyWebApp}, that the host directory contains,
among others, a subdirectory named @emph{site} in which
the SRM scripts reside.

This example is meant to run on localhost, so the
@strong{ServerName} value is set to @emph{webapp}.  For a
site serving the public, @strong{ServerName} should be set
to something like @emph{www.webapp.com}.

The value of @strong{DirectoryIndex} should be the file
or script that should be used when the URL omits a specific
page.

In the usual server configuration, this file should be
created in @file{/etc/apache2/sites-available/}.  Adjust this
path if it does not reflect the structure of the target
server.

@example
# filename: webapp.conf
<VirtualHost *:80>
   ServerName webapp
   DocumentRoot /var/www/MyWebApp/site
   DirectoryIndex Person.srm
</VirtualHost>
@end example

Having created the configuration file in the appropriate
directory, enable the site with the following commands:

@example
$ sudo a2ensite webapp
$ sudo service apache2 restart
@end example

@node Make Site Available
@section Make Site Available

The final step to setup an web site is to make sure that the
site can be found by the browsers that should have access.

@subheading Localhost setup

To run on a localhost, it is only necessary to add an entry
to @file{/etc/hosts}:

@example
# file /etc/hosts
.
.
127.0.0.1 webapp
@end example

@subheading World-Wide Web

To make the site available to the internet at large, it will be
necessary to create a @acronym{DNS} (Dynamic Name Server) entry
at a name registrar.  This process will differ according to the
registrar.  Please follow the instructions found there.
