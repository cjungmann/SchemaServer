#!/bin/bash

declare FSEP="#"
declare RSEP="^"

# see: man tput
# see: man 4 console_codes
declare CSI='\003['
declare CLRSCR="${CSI}2J"

declare -a ARR_CONFS
declare -a TARGET_CONF
declare -i COUNT_CONFS

declare -a SRM_DEFAULT_MODES
declare HOSTNAME SRM_FILE SRM_MODE

# Scan configuration file to collect ServerName, DocumentRoot, and
# DirectoryIndex settings into a delimited string which is saved to
# the global ARR_CONFS array.
#
# If the PWD matches the DocumentRoot value for a site, the
# TARGET_CONF global array is initialised to the values of the 
# matching site.
add_enabled_site_to_array()
{
    path="$1"
    local fstr=$( cat "$path" )
    local sname droot dirndx recstr
    local -a recarr

    sname=$( echo "$fstr" | awk '/^ *ServerName/ { print $2 }' - )
    droot=$( echo "$fstr" | awk '/^ *DocumentRoot/ { print $2 }' - )
    dirndx=$( echo "$fstr" | awk '/^ *DirectoryIndex/ { print $2 }' - )

    if [ -n "$sname" -a -n "$droot" ]; then
        recarr=( "${sname}" "${droot}" )
        if [ -n "$dirndx" ]; then
            recarr=( "${recarr[@]}" "${dirndx}" )
        fi

        local IFS="${FSEP}"
        ARR_CONFS=( "${ARR_CONFS[@]}" "${recarr[*]}" )
        
        if [ "$droot" = "$PWD" ]; then
            TARGET_CONF=( "${sname}" "${droot}" "${dirndx}" )
        fi
    fi
}

# Cycles through *.conf apache files, calling add_enabled_site_to_array
# with each to collect the sites' configurations.
#
# Since the count of sites is mulitple times used as a flag, the
# COUNT_CONFS global integer is set when the array is complete.
apache_enabled_sites_to_global_array()
{
    local IFS=$'\n'
    local -a srms=( $( ls -1 /etc/apache2/sites-enabled/*.conf ) )
    local srm
    for srm in "${srms[@]}"; do
        add_enabled_site_to_array "$srm"
    done
    COUNT_CONFS=${#ARR_CONFS[@]}
}


show_srm_options()
{
    local host=$1
    local page=$2

    ss_webscript $host $page

    # tput clear
    # echo
    # echo "Show options for http://${host}?${page}"
    # read -p "Press any key to return"
}

collect_target_conf_srm_files()
{
    local hostname="${TARGET_CONF[0]}"
    local swd="${TARGET_CONF[1]}"
    local -a srmarr
    cd "$swd"
    srmarr=( $( ls -1 *.srm ) )
    cd - > /dev/null

    local -i ndx=0
    local srm choice

    while true; do
        tput clear
        echo
        echo "Select a SRM file from the following list:"
        echo

        ndx=0
        for srm in "${srmarr[@]}"; do
            echo "$(( ++ndx )). $srm"
        done

        echo
        read -p "Type 1 - $ndx, or 0 to exit. " choice
        if [ $choice -lt 0 -o $choice -gt $ndx ]; then
            echo "Selection out-of-range."
            return 1
        elif [ $choice -eq 0 ]; then
            return 0
        else
            show_srm_options "$hostname" "${srmarr[$choice-1]}"
        fi
    done
}

# Builds an indexed table of enabled sites, waiting for a user
# response.  If a valid site is selected, the global TARGET_CONF
# array is set with that site's values.
pick_target_conf()
{
    local IFS="${FSEP}"
    local -a arrc
    local confstr
    local -i choice ndx=0

    TARGET_CONF=

    tput clear
    echo
    echo "Select the target site from the following list:"
    echo

    for confstr in "${ARR_CONFS[@]}"; do
        arrc=( $( echo "${confstr}" ) ) 
        echo "$(( ++ndx )) ${arrc[0]}"
    done

    echo
    read -p "Enter a number from 1 to $ndx and press enter.  Press 0 to quit: " choice

    if [ $choice -eq 0 ]; then
        return 1
    elif [ $choice -gt $ndx -o $choice -lt 0]; then
        return 2
    else
        TARGET_CONF=( $( echo "${ARR_CONFS[$choice-1]}" ) )
        return 0
    fi
}

process_site_choice()
{
    collect_target_conf_srm_files
}

process_target_conf()
{
    local shost="${TARGET_CONF[0]}"
    local spath="${TARGET_CONF[1]}"
    local sindx
    if [ "${#TARGET_CONF[@]}" -gt 2 ]; then
        sindx="${TARGET_CONF[2]}"
    fi
    
    cd "${spath}"
    SRM_FILES=( $( ls -1 *.srm ) )
    # ignore OLDPWD output for cd:
    cd - > /dev/null

    local IFS="$FSEP"
    local haystack="${IFS:0:1}${SRM_FILES[*]}${IFS:0:1}"
    local needle="${IFS:0:1}${sindx}${IFS:0:1}"

    if [[ -n "$sindx" && (${haystack} =~ ${needle}) ]]; then
        test_site "${shost}" "${sindx}"
    else
        echo "Unable to find script,  '$sindx'"
    fi
}

apache_enabled_sites_to_global_array

if [ $COUNT_CONFS -eq 0 ]; then
    echo "No apache sites enabled, exiting."
    exit 1
elif [ $COUNT_CONFS -eq 1 ]; then
    TARGET_CONF=( $( echo "${ARR_CONFS[0]}" ) )
    echo "Processing the only available site."
    process_site_choice
fi

# Run as application if sites found and not in PWD:
declare -i exval
if [ $COUNT_CONFS -gt 1 ]; then
    while true; do
        pick_target_conf
        exval=$?
        case $exval in
            0) process_site_choice ;;
            1) exit 0 ;;
            2) echo "Index selected out-of-range." ;;
        esac
    done
fi






